{"version":3,"file":"static/js/153.8dd3ce87.chunk.js","mappings":"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","sources":["Components/ToDoTable.js","ToDo.js","Header.js"],"sourcesContent":["import {\r\n  Grid,\r\n  Radio,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport useSound from \"use-sound\";\r\nimport api from \"../api\";\r\nimport { showSnackbar } from \"../store/Reducer/Snackbar\";\r\nimport \"../styles/ToDoTable.css\";\r\n\r\nconst ToDoTable = (props) => {\r\n  const [tableData, setTableData] = useState({\r\n    allTableData: [],\r\n    rowsData: [],\r\n  });\r\n\r\n  // const BASE_URL =\r\n  //   process.env.NODE_ENV === \"production\"\r\n  //     ? process.env.REACT_APP_API_URL\r\n  //     : \"http://localhost:4000\";\r\n\r\n  // useEffect(() => {\r\n  //   if (props?.[\"dbId\"]) {\r\n  //     const getDataFromDb = async () => {\r\n  //       const getAllData = await axios.get(\r\n  //         `http://localhost:4000/getAllData?id=${props?.[\"dbId\"]}`\r\n  //       );\r\n  //       // const getData = getAllData.data.result.rows;\r\n  //       const getData = getAllData.data.result.rows.filter(\r\n  //         ({ status }) => status === \"Pending\"\r\n  //       );\r\n  //       setTableData((prev) => {\r\n  //         prev[\"allTableData\"] = getData;\r\n  //         return { ...prev };\r\n  //       });\r\n  //     };\r\n  //     getDataFromDb();\r\n  //   }\r\n  // }, [props, tableData]);\r\n\r\n  useEffect(() => {\r\n    if (props?.[\"dbId\"]) {\r\n      const getDataFromDb = async () => {\r\n        const getAllData = await api.get(`/getAllData?id=${props?.[\"dbId\"]}`);\r\n        const getData = getAllData.data.result.rows.filter(\r\n          ({ status }) => status === \"Pending\"\r\n        );\r\n        setTableData((prev) => {\r\n          prev[\"allTableData\"] = getData;\r\n          return { ...prev };\r\n        });\r\n      };\r\n      getDataFromDb();\r\n    }\r\n  }, [props.dbId, tableData]);\r\n\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n  // useEffect(() => {\r\n  //   if (props?.[\"id\"] === \"Work\") {\r\n  //     const getData = tableData?.[\"allTableData\"]?.filter(\r\n  //       ({ type }) => type === \"WK\"\r\n  //     );\r\n  //     setTableData((prev) => {\r\n  //       prev[\"rowsData\"] = getData;\r\n  //       return { ...prev };\r\n  //     });\r\n  //   } else if (props?.[\"id\"] === \"Grocery\") {\r\n  //     const getData = tableData?.[\"allTableData\"]?.filter(\r\n  //       ({ type }) => type === \"GY\"\r\n  //     );\r\n  //     setTableData((prev) => {\r\n  //       prev[\"rowsData\"] = getData;\r\n  //       return { ...prev };\r\n  //     });\r\n  //   } else {\r\n  //     const getData = tableData?.[\"allTableData\"]?.filter(\r\n  //       ({ type }) => type === \"OFC\"\r\n  //     );\r\n  //     setTableData((prev) => {\r\n  //       prev[\"rowsData\"] = getData;\r\n  //       return { ...prev };\r\n  //     });\r\n  //   }\r\n  // }, [props, tableData.allTableData]);\r\n\r\n  useEffect(() => {\r\n    if (props?.[\"id\"]) {\r\n      const getData = tableData?.[\"allTableData\"]?.filter(({ type }) =>\r\n        props.id === \"Work\"\r\n          ? type === \"WK\"\r\n          : props.id === \"Grocery\"\r\n          ? type === \"GY\"\r\n          : type === \"OFC\"\r\n      );\r\n      setTableData((prev) => ({\r\n        ...prev,\r\n        rowsData: getData,\r\n      }));\r\n    }\r\n  }, [props.id, tableData.allTableData]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const updateData = async (getText) => {\r\n    const response = await api.put(\r\n      `/updateData?dbId=${props.dbId}&description=${getText}`\r\n    );\r\n    if (response.data.Status_Cd === 1) {\r\n      dispatch(showSnackbar(true, \"success\", \"Data updated Successfully\"));\r\n    } else dispatch(showSnackbar(true, \"error\", \"Data not updated\"));\r\n\r\n    const getAllData = await api.get(`/getAllData?id=${props?.[\"dbId\"]}`);\r\n    const getData = getAllData.data.result.rows.filter(\r\n      ({ status }) => status === \"Pending\"\r\n    );\r\n    if (getAllData.data.Status_Cd === 1) {\r\n      const getWorkData = getData.filter(({ type }) => type === \"WK\");\r\n      props.updateBadge(\"WK\", getWorkData?.length);\r\n    }\r\n    if (getAllData.data.Status_Cd === 1) {\r\n      const getWorkData = getData.filter(({ type }) => type === \"GY\");\r\n      props.updateBadge(\"GY\", getWorkData?.length);\r\n    }\r\n    if (getAllData.data.Status_Cd === 1) {\r\n      const getWorkData = getData.filter(({ type }) => type === \"OFC\");\r\n      props.updateBadge(\"OFC\", getWorkData?.length);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e, index) => {\r\n    setSelectedRow(index); // Update the selected row index\r\n    const getText = e.target.closest(\"tr\").firstElementChild.textContent.trim();\r\n    updateData(getText);\r\n    // const response = await axios.put(\r\n    //   `http://localhost:4000/updateData?dbId=${props.dbId}&description=${getText}`\r\n    // );\r\n    // if (response.data.Status_Cd === 1) {\r\n    //   dispatch(showSnackbar(true, \"success\", \"Data updated Successfully\"));\r\n    //   return;\r\n    // }\r\n    // dispatch(showSnackbar(true, \"error\", \"Data not updated\"));\r\n  };\r\n\r\n  const [playActive] = useSound(\r\n    \"/103133__robinhood76__01892-completed-spell.wav\",\r\n    {\r\n      volume: 0.25,\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Grid item xs={10} sm={6} md={6}>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className=\"tableCell\">Description</TableCell>\r\n                <TableCell align=\"left\" className=\"tableCell\">\r\n                  Mark as Completed\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {tableData?.rowsData.map((row, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row?.description}\r\n                  </TableCell>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <Radio\r\n                      checked={selectedRow === index} // Bind checked state\r\n                      onChange={(e, index) => handleChange(e, index)} // Update state on change\r\n                      value={index}\r\n                      onMouseDown={playActive}\r\n                      // onMouseUp={() => {\r\n                      //   selectedRow ? playOff() : playOn();\r\n                      // }}\r\n                    />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ToDoTable;\r\n","import { Box, Button, Grid, TextField, Typography } from \"@mui/material\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport api from \"./api\";\r\nimport ToDoTable from \"./Components/ToDoTable\";\r\nimport { showSnackbar } from \"./store/Reducer/Snackbar\";\r\nimport \"./styles/ToDo.css\";\r\n\r\nconst ToDo = (props) => {\r\n  const [descriptionData, setDescriptionData] = useState({\r\n    id: \"\",\r\n    initialData: \"\",\r\n    workDescription: \"\",\r\n    groceryDescription: \"\",\r\n    officeDescription: \"\",\r\n    dbId: \"\",\r\n    flag: \"\",\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const inputField = document.getElementsByTagName(\"input\")[0];\r\n    setTimeout(() => {\r\n      inputField?.focus();\r\n    }, 10);\r\n    setDescriptionData((prev) => {\r\n      prev[\"id\"] = props?.id;\r\n      prev[\"workDescription\"] = \"\";\r\n      prev[\"groceryDescription\"] = \"\";\r\n      prev[\"officeDescription\"] = \"\";\r\n      return { ...prev };\r\n    });\r\n  }, [props?.id]);\r\n\r\n  const location = useLocation();\r\n  const user_id = location.state?.userId;\r\n  useEffect(() => {\r\n    setDescriptionData((prev) => {\r\n      prev[\"dbId\"] = user_id;\r\n      return { ...prev };\r\n    });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    if (descriptionData?.[\"id\"] === \"Work\") {\r\n      setDescriptionData((prev) => {\r\n        prev[\"workDescription\"] = e.target.value;\r\n        return { ...prev };\r\n      });\r\n    } else if (descriptionData?.[\"id\"] === \"Grocery\") {\r\n      setDescriptionData((prev) => {\r\n        prev[\"groceryDescription\"] = e.target.value;\r\n        return { ...prev };\r\n      });\r\n    } else {\r\n      setDescriptionData((prev) => {\r\n        prev[\"officeDescription\"] = e.target.value;\r\n        return { ...prev };\r\n      });\r\n    }\r\n  };\r\n\r\n  // const BASE_URL =\r\n  //   process.env.NODE_ENV === \"production\"\r\n  //     ? process.env.REACT_APP_API_URL\r\n  //     : \"http://localhost:4000\";\r\n\r\n  const sendDataToDb = useCallback(async () => {\r\n    if (descriptionData?.[\"workDescription\"].length > 0) {\r\n      const response = await api.post(`/descriptionData`, descriptionData);\r\n      if (response.data.Status_Cd === 1) {\r\n        setDescriptionData((prev) => {\r\n          prev[\"workDescription\"] = \"\";\r\n          return { ...prev };\r\n        });\r\n        dispatch(showSnackbar(true, \"success\", \"Data Saved Successfully!\"));\r\n        return;\r\n      }\r\n      dispatch(showSnackbar(true, \"error\", \"Data not saved\"));\r\n    } else if (descriptionData?.[\"groceryDescription\"].length > 0) {\r\n      const response = await api.post(`/descriptionData`, descriptionData);\r\n      if (response.data.Status_Cd === 1) {\r\n        setDescriptionData((prev) => {\r\n          prev[\"groceryDescription\"] = \"\";\r\n          return { ...prev };\r\n        });\r\n        dispatch(showSnackbar(true, \"success\", \"Data Saved Successfully!\"));\r\n        return;\r\n      }\r\n      dispatch(showSnackbar(true, \"error\", \"Data not saved\"));\r\n    } else {\r\n      const response = await api.post(`/descriptionData`, descriptionData);\r\n      if (response.data.Status_Cd === 1) {\r\n        setDescriptionData((prev) => {\r\n          prev[\"officeDescription\"] = \"\";\r\n          return { ...prev };\r\n        });\r\n        dispatch(showSnackbar(true, \"success\", \"Data Saved Successfully!\"));\r\n        return;\r\n      }\r\n      dispatch(showSnackbar(true, \"error\", \"Data not saved\"));\r\n    }\r\n    setDescriptionData((prev) => {\r\n      prev[\"flag\"] = true;\r\n      return { ...prev };\r\n    });\r\n  }, [descriptionData, dispatch]);\r\n\r\n  useEffect(() => {\r\n    const getDataFromDb = async () => {\r\n      const getAllData = await api.get(\r\n        `/getAllData?id=${descriptionData?.[\"dbId\"]}`\r\n      );\r\n\r\n      const getData = getAllData.data.result.rows.filter(\r\n        ({ status }) => status === \"Pending\"\r\n      );\r\n      // if (getAllData.data.Status_Cd === 1) {\r\n      //   const getWorkData = getData.filter(({ type }) => type === \"WK\");\r\n      //   props.updateBadge(\"WK\", getWorkData.length);\r\n      // }\r\n      // if (getAllData.data.Status_Cd === 1) {\r\n      //   const getWorkData = getData.filter(({ type }) => type === \"GY\");\r\n      //   props.updateBadge(\"GY\", getWorkData.length);\r\n      // }\r\n      // if (getAllData.data.Status_Cd === 1) {\r\n      //   const getWorkData = getData.filter(({ type }) => type === \"OFC\");\r\n      //   props.updateBadge(\"OFC\", getWorkData.length);\r\n      // }\r\n      if (getAllData.data.Status_Cd === 1) {\r\n        [\"WK\", \"GY\", \"OFC\"].forEach((type) => {\r\n          const getWorkData = getData.filter((item) => item.type === type);\r\n          props.updateBadge(type, getWorkData.length);\r\n        });\r\n      }\r\n    };\r\n    getDataFromDb();\r\n  }, [sendDataToDb]);\r\n\r\n  useEffect(() => {\r\n    const getDataFromDb = async () => {\r\n      const getAllData = await api.get(\r\n        `/getAllData?id=${descriptionData?.[\"dbId\"]}`\r\n      );\r\n      const getData = getAllData.data.result.rows.filter(\r\n        ({ status }) => status === \"Pending\"\r\n      );\r\n      if (getAllData.data.Status_Cd === 1) {\r\n        [\"WK\", \"GY\", \"OFC\"].forEach((type) => {\r\n          const getWorkData = getData.filter((item) => item.type === type);\r\n          props.updateBadge(type, getWorkData.length);\r\n        });\r\n      }\r\n    };\r\n    getDataFromDb();\r\n  }, [descriptionData?.[\"dbId\"]]);\r\n\r\n  return (\r\n    <>\r\n      <HelmetProvider>\r\n        <Helmet title=\"My To-Do App\" />\r\n      </HelmetProvider>\r\n      <Grid container className=\"main\">\r\n        <Grid item xs={12} sm={12} md={12}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} sm={12} md={12} className=\"container\">\r\n              <Typography variant=\"h5\">Add Your {props?.id}</Typography>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={12} className=\"container\">\r\n              <Box sx={{ width: 500, maxWidth: \"80%\" }}>\r\n                {descriptionData?.[\"workDescription\"].length > 0 ? (\r\n                  <TextField\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    value={descriptionData?.[\"workDescription\"]}\r\n                  />\r\n                ) : descriptionData?.[\"groceryDescription\"].length > 0 ? (\r\n                  <TextField\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    value={descriptionData?.[\"groceryDescription\"]}\r\n                  />\r\n                ) : descriptionData?.[\"officeDescription\"].length > 0 ? (\r\n                  <TextField\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    value={descriptionData?.[\"officeDescription\"]}\r\n                  />\r\n                ) : (\r\n                  <TextField\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                    value={descriptionData?.[\"initialData\"]}\r\n                  />\r\n                )}\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={12} className=\"container\">\r\n              <Button variant=\"contained\" onClick={sendDataToDb}>\r\n                Add\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item marginTop=\"1rem\">\r\n            <ToDoTable\r\n              id={descriptionData?.[\"id\"]}\r\n              dbId={descriptionData?.[\"dbId\"]}\r\n              updateBadge={props.updateBadge}\r\n              flag={descriptionData?.[\"flag\"]}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import CloseIcon from \"@mui/icons-material/Close\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport { Badge, Grid, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport * as React from \"react\";\r\nimport { Fragment, useState } from \"react\";\r\nimport \"./styles/Header.css\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nconst Header = () => {\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n  const [id, setId] = useState({\r\n    initialData: \"Work\",\r\n    workBadge: 0,\r\n    groceryBadge: 0,\r\n    officeBadge: 0,\r\n  });\r\n  const handleClick = (e) => {\r\n    setId((prev) => {\r\n      prev[\"initialData\"] = e.target.id;\r\n      return { ...prev };\r\n    });\r\n  };\r\n\r\n  const handleOpenNavMenu = (event) => {\r\n    if (event.currentTarget) setOpenMenu(true);\r\n  };\r\n  const handleCloseNavMenu = () => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  const updateBadge = (badgeId, badgeData) => {\r\n    setId((prev) => {\r\n      if (badgeId === \"WK\") {\r\n        return { ...prev, workBadge: badgeData }; // Return a new object\r\n      } else if (badgeId === \"GY\") {\r\n        return { ...prev, groceryBadge: badgeData }; // Return a new object\r\n      } else {\r\n        return { ...prev, officeBadge: badgeData }; // Return a new object\r\n      }\r\n    });\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const calculateMenuWidth = () => {\r\n    // Calculate the menu width based on the current screen size\r\n    if (isMobile) {\r\n      return \"100%\"; // Use full width for smaller screens\r\n    } else {\r\n      return \"30ch\"; // Use a fixed width for larger screens\r\n    }\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <AppBar position=\"static\" className=\"appbar\">\r\n        <Toolbar>\r\n          <Grid container>\r\n            <Grid\r\n              item\r\n              md={12}\r\n              sx={{\r\n                display: { xs: \"flex\", md: \"none\" },\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <IconButton\r\n                onClick={handleOpenNavMenu}\r\n                sx={{ color: \"white\", padding: \"0px\" }}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n              <Menu\r\n                // anchorOrigin is used to position the popup menu\r\n                anchorOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"left\",\r\n                }}\r\n                open={openMenu}\r\n                onClose={handleCloseNavMenu}\r\n                sx={{\r\n                  display: { xs: \"block\", md: \"none\" },\r\n                  \"& .mobileview\": {\r\n                    // & is used to target the element with className=\"mobileview\" in the component\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\", // Center the items horizontally\r\n                    justifyContent: \"center\", // Center the items vertically\r\n                  },\r\n                }}\r\n                PaperProps={{\r\n                  style: {\r\n                    maxHeight: \"none\", // Disable max height\r\n                    width: calculateMenuWidth(), // Dynamically calculate width\r\n                    // backgroundColor: \"#a4ace0\",\r\n                    backgroundColor: \"darkgrey\",\r\n                  },\r\n                }}\r\n              >\r\n                <Grid item className=\"close-icon\" onClick={handleCloseNavMenu}>\r\n                  <CloseIcon />\r\n                </Grid>\r\n                <Grid item className=\"mobileview\">\r\n                  <Badge badgeContent={id?.[\"workBadge\"]} color=\"success\">\r\n                    <Button\r\n                      id=\"Work\"\r\n                      sx={{\r\n                        display: \"block\",\r\n                        color: \"white\",\r\n                        fontSize: \"large\",\r\n                      }}\r\n                      onClick={(e) => {\r\n                        handleClick(e);\r\n                        handleCloseNavMenu();\r\n                      }}\r\n                    >\r\n                      Work\r\n                    </Button>\r\n                  </Badge>\r\n                  <Badge badgeContent={id?.[\"groceryBadge\"]} color=\"success\">\r\n                    <Button\r\n                      id=\"Grocery\"\r\n                      sx={{\r\n                        display: \"block\",\r\n                        color: \"white\",\r\n                        fontSize: \"large\",\r\n                      }}\r\n                      onClick={(e) => {\r\n                        handleClick(e);\r\n                        handleCloseNavMenu();\r\n                      }}\r\n                    >\r\n                      Grocery\r\n                    </Button>\r\n                  </Badge>\r\n                  <Badge badgeContent={id?.[\"officeBadge\"]} color=\"success\">\r\n                    <Button\r\n                      id=\"Office\"\r\n                      sx={{\r\n                        display: \"block\",\r\n                        color: \"white\",\r\n                        fontSize: \"large\",\r\n                      }}\r\n                      onClick={(e) => {\r\n                        handleClick(e);\r\n                        handleCloseNavMenu();\r\n                      }}\r\n                    >\r\n                      Office\r\n                    </Button>\r\n                  </Badge>\r\n                </Grid>\r\n              </Menu>\r\n            </Grid>\r\n\r\n            <Grid container justifyContent=\"space-evenly\">\r\n              <Grid\r\n                item\r\n                md={5}\r\n                className=\"item\"\r\n                sx={{\r\n                  display: {\r\n                    xs: \"none\",\r\n                    md: \"flex\",\r\n                  },\r\n                }}\r\n              >\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  sx={{\r\n                    fontWeight: \"bold\",\r\n                    fontFamily: \"cursive\",\r\n                    color: \"goldenrod\",\r\n                  }}\r\n                >\r\n                  ToDO App\r\n                </Typography>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                md={6}\r\n                sx={{\r\n                  display: {\r\n                    xs: \"none\",\r\n                    md: \"flex\",\r\n                    justifyContent: \"space-evenly\",\r\n                  },\r\n                }}\r\n              >\r\n                <Badge badgeContent={id?.[\"workBadge\"]} color=\"success\">\r\n                  <Button onClick={handleClick} id=\"Work\">\r\n                    Work\r\n                  </Button>\r\n                </Badge>\r\n                <Badge badgeContent={id?.[\"groceryBadge\"]} color=\"success\">\r\n                  <Button onClick={handleClick} id=\"Grocery\">\r\n                    Grocery\r\n                  </Button>\r\n                </Badge>\r\n                <Badge badgeContent={id?.[\"officeBadge\"]} color=\"success\">\r\n                  <Button onClick={handleClick} id=\"Office\">\r\n                    Office\r\n                  </Button>\r\n                </Badge>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container>\r\n        <ToDo id={id?.[\"initialData\"]} updateBadge={updateBadge} />\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Header;\r\n"],"names":["props","tableData","setTableData","useState","allTableData","rowsData","useEffect","async","getData","api","get","data","result","rows","filter","_ref","status","prev","getDataFromDb","dbId","selectedRow","setSelectedRow","_tableData$allTableDa","_ref2","type","id","dispatch","useDispatch","handleChange","e","index","put","getText","Status_Cd","showSnackbar","getAllData","_ref3","getWorkData","_ref4","updateBadge","length","_ref5","_ref6","updateData","target","closest","firstElementChild","textContent","trim","playActive","useSound","volume","_jsx","Grid","container","justifyContent","children","item","xs","sm","md","TableContainer","_jsxs","Table","TableHead","TableRow","TableCell","className","align","TableBody","map","row","component","scope","description","Radio","checked","onChange","value","onMouseDown","_location$state","descriptionData","setDescriptionData","initialData","workDescription","groceryDescription","officeDescription","flag","inputField","document","getElementsByTagName","setTimeout","focus","user_id","useLocation","state","userId","sendDataToDb","useCallback","post","forEach","_Fragment","HelmetProvider","Helmet","title","spacing","Typography","variant","Box","sx","width","maxWidth","TextField","fullWidth","Button","onClick","marginTop","ToDoTable","Header","openMenu","setOpenMenu","setId","workBadge","groceryBadge","officeBadge","handleClick","handleCloseNavMenu","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","Fragment","AppBar","position","Toolbar","display","flexDirection","IconButton","event","currentTarget","color","padding","MenuIcon","Menu","anchorOrigin","vertical","horizontal","open","onClose","alignItems","PaperProps","style","maxHeight","backgroundColor","CloseIcon","Badge","badgeContent","fontSize","fontWeight","fontFamily","ToDo","badgeId","badgeData"],"sourceRoot":""}